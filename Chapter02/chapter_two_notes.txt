BENEFITS of Creating A Custom Class
1. encapsulates state
  - state of the object can only be naipulated in ways that make sense for the object
2. provide a simple way for calling functions related to the instances of a class 
  - called Methods in Ruby

SOLID design
1. single-responsibility principle
2. open-closed principle
3. Liskov substitution principle
4. interface segregation principle
5. dependency inversion principle

single-responsibility principle
 - a class should serve one purpose
 - "Would I be able to use any of the newly split classes in additional places in my application or library?"
 - "Do I want to be able to easily replace certain parts of this class with alternative parts?"

open-closed principle
  - a class should be open for extension but closed for modification
  - extension
    - adding instance variables and methods
  - modification
    - modifying or removing existing instance variables or methods
  
liskov substitution principle
  - anywhere in your code that you can use object T you can use an object of subtype T
  - in your code where you are using an instance of a class (T) you can use an instance of
    its subclass without the code breaking
  - example see lines 1-15 Max class in Chapter02/07-liskov-subsitution-max.rb
  - max the subclasses method work you can make the extra argument optional (lines 17-21)
  - for superclass and subclass .kind_of?(Class) should always be used
    (.instance_of?(Class) and obj.class == Class are too specific)
  
interface substitution principle
  - clients should not depend on methods they dont use
  - doesn't exactly apply to ruby since ruby will only call methods that are used
  - Ruby does not follow this principle as the Core classes break the principle
  - 